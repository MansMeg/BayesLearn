cat("Call:\n")
print(x$call, ...)
cat("\nPortfolio expected return:    ", format(x$er, ...), "\n")
cat("Portfolio standard deviation: ", format(x$sd, ...), "\n")
cat("Portfolio weights:\n")
print(round(x$weights,4), ...)
invisible(x)
}
#
# summary method for portfolio object
summary.portfolio <- function(object, risk.free=NULL, ...)
# risk.free			risk-free rate. If not null then
#				compute and print Sharpe ratio
#
{
cat("Call:\n")
print(object$call)
cat("\nPortfolio expected return:    ", format(object$er, ...), "\n")
cat(  "Portfolio standard deviation: ", format(object$sd, ...), "\n")
if(!is.null(risk.free)) {
SharpeRatio <- (object$er - risk.free)/object$sd
cat("Portfolio Sharpe Ratio:       ", format(SharpeRatio), "\n")
}
cat("Portfolio weights:\n")
print(round(object$weights,4), ...)
invisible(object)
}
# hard-coded 4 digits; prefer to let user control, via ... or other argument
#
# plot method for portfolio object
plot.portfolio <- function(object, ...)
{
asset.names <- names(object$weights)
barplot(object$weights, names=asset.names,
xlab="Assets", ylab="Weight", main="Portfolio Weights", ...)
invisible()
}
#
# print method for Markowitz object
print.Markowitz <- function(x, ...)
{
cat("Call:\n")
print(x$call)
xx <- rbind(x$er,x$sd)
dimnames(xx)[[1]] <- c("ER","SD")
cat("\nFrontier portfolios' expected returns and standard deviations\n")
print(round(xx,4), ...)
invisible(x)
}
# hard-coded 4, should let user control
#
# summary method for Markowitz object
summary.Markowitz <- function(object, risk.free=NULL)
{
call <- object$call
asset.names <- colnames(object$weights)
port.names <- rownames(object$weights)
if(!is.null(risk.free)) {
# compute efficient portfolios with a risk-free asset
nport <- length(object$er)
sd.max <- object$sd[1]
sd.e <- seq(from=0,to=sd.max,length=nport)
names(sd.e) <- port.names
#
# get original er and cov.mat data from call
er <- eval(object$call$er)
cov.mat <- eval(object$call$cov.mat)
#
# compute tangency portfolio
tan.port <- tangency.portfolio(er,cov.mat,risk.free)
x.t <- sd.e/tan.port$sd		# weights in tangency port
rf <- 1 - x.t			# weights in t-bills
er.e <- risk.free + x.t*(tan.port$er - risk.free)
names(er.e) <- port.names
we.mat <- x.t %o% tan.port$weights	# rows are efficient portfolios
dimnames(we.mat) <- list(port.names, asset.names)
we.mat <- cbind(rf,we.mat)
}
else {
er.e <- object$er
sd.e <- object$sd
we.mat <- object$weights
}
ans <- list("call" = call,
"er"=er.e,
"sd"=sd.e,
"weights"=we.mat)
class(ans) <- "summary.Markowitz"
ans
}
print.summary.Markowitz <- function(x, ...)
{
xx <- rbind(x$er,x$sd)
port.names <- names(x$er)
asset.names <- colnames(x$weights)
dimnames(xx)[[1]] <- c("ER","SD")
cat("Frontier portfolios' expected returns and standard deviations\n")
print(round(xx,4), ...)
cat("\nPortfolio weights:\n")
print(round(x$weights,4), ...)
invisible(x)
}
# hard-coded 4, should let user control
#
# plot efficient frontier
#
# things to add: plot original assets with names
# tangency portfolio
# global min portfolio
# risk free asset and line connecting rf to tangency portfolio
#
plot.Markowitz <- function(object, plot.assets=FALSE, ...)
# plot.assets		logical. If true then plot asset sd and er
{
if (!plot.assets) {
y.lim=c(0,max(object$er))
x.lim=c(0,max(object$sd))
plot(object$sd,object$er,type="b",xlim=x.lim, ylim=y.lim,
xlab="Portfolio SD", ylab="Portfolio ER",
main="Efficient Frontier", ...)
}
else {
call = object$call
mu.vals = eval(call$er)
sd.vals = sqrt( diag( eval(call$cov.mat) ) )
y.lim = range(c(0,mu.vals,object$er))
x.lim = range(c(0,sd.vals,object$sd))
plot(object$sd,object$er,type="b", xlim=x.lim, ylim=y.lim,
xlab="Portfolio SD", ylab="Portfolio ER",
main="Efficient Frontier", ...)
text(sd.vals, mu.vals, labels=names(mu.vals))
}
invisible()
}
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target,shorts=F)
mu.target = max(muhat.vals)
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target,shorts=F)
e1.port
e1.port
gmin.port
str(gmin.port)
str(gmin.port)$er
gmin.port$er
e1.port
gmin.port$er*0.5+e1.port*0.5
gmin.port$er*0.5+e1.port$er*0.5
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005,shorts=F)
summary(tan.port)
gmin.port
gmin.port$er
qnorm(0.05)
gmin.port$er+qnorm(0.05)*gmin.port$sd
exp(gmin.port$er+qnorm(0.05)*gmin.port$sd)
1-exp(gmin.port$er+qnorm(0.05)*gmin.port$sd)
exp(gmin.port$er+qnorm(0.05)*gmin.port$sd)-1
100*(exp(gmin.port$er+qnorm(0.05)*gmin.port$sd)-1)
gmin.port$er+qnorm(0.05)*gmin.port$sd
100*(gmin.port$er+qnorm(0.05)*gmin.port$sd)
gmin.port$er
qnorm(0.05)
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
gmin.port$sd
100*(gmin.port$er+qnorm(0.05)*gmin.port$sd)
50*(gmin.port$er+qnorm(0.05)*gmin.port$sd)
50*(exp(gmin.port$er+qnorm(0.05)*gmin.port$sd)-1)
options(digits=4, width=70)
library("zoo")
# load the data into a zoo object using the zoo function read.csv
source(file="http://spark-public.s3.amazonaws.com/compfinance/R%20code/portfolio.r")
lab8.df = read.csv("http://spark-public.s3.amazonaws.com/compfinance/R%20code/lab9returns.csv",
stringsAsFactors=F)
colnames(lab9.df)
#
# 2. Create zoo object from data and dates in lab7.df
#
lab9.z = zoo(x=lab9.df[, -1],
order.by=as.yearmon(lab9.df[, 1], format="%b-%y"))
start(lab9.z)
end(lab9.z)
colnames(lab9.z)
#
# 3. Create timePlots of data
#
# create custom panel function to draw horizontal line at zero in each panel
# of plot
my.panel <- function(...) {
lines(...)
abline(h=0)
}
plot(lab9.z, lwd=2, panel=my.panel, col="blue")
# all on the same graph
plot(lab9.z, plot.type = "single", main="lab9 returns",
col=1:4, lwd=2)
abline(h=0)
legend(x="bottomleft", legend=colnames(lab7.z), col=1:4, lwd=2)
ls.str()
test<-function(a=10){
AVAR<<-1
}
test<-function(a=10){
AVAR<<-a
}
test
test()
installed.packages()
test<-installed.packages()
viewData(test)
library()
beta<-c(-0.5,1)
sim.size<-1000
bin.size<-10
data<-data.frame(x1=sample(0:1,sim.size,replace=T),u=rnorm(sim.size,sd=2))
data$pi<-with(data,1/(exp(-(beta[1]+beta[2]*x1))+1))
data$pi.RE<-with(data,1/(exp(-(beta[1]+beta[2]*x1+u))+1))
data$Y<-rbinom(sim.size,size=bin.size,prob=data$pi)
data$Y.RE<-rbinom(sim.size,size=bin.size,prob=data$pi.RE)
data$Y_n<-with(data,bin.size-Y)
data$Y_n.RE<-with(data,bin.size-Y.RE)
data.dis<-matrix(0,ncol=4,nrow=sim.size*bin.size)
for (i in 1:sim.size){
temp.data<-matrix(0,ncol=4,nrow=bin.size)
temp.data[,1]<-data[i,1]
temp.data[,2]<-data[i,2]
temp.data[,3]<-0
temp.data[1:data[i,]$Y,3]<-1
temp.data[,4]<-0
temp.data[1:data[i,]$Y.RE,4]<-1
data.dis[((i-1)*bin.size+1):(i*bin.size),]<-temp.data}
data.dis<-as.data.frame(data.dis)
names(data.dis)<-c("x1","u","Y","Y.RE")
lev2pois.mod<-glmer(Y.RE ~ x1 + (1|u),family=binary,data=data)
library(lme4)
lev2pois.mod<-glmer(Y.RE ~ x1 + (1|u),family=binary,data=data)
lev2bin.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data)
Y.RE
viewData(data.dis)
lev2bin.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data.dis)
summary(lev2bin.mod)
lev2bin.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data.dis)
summary(lev2bin.mod)
lev2bin.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data.dis)
lev2bin.mod<-glmer(cbind(Y.RE,Y_n.RE) ~ x1 + (1|u),family=binomial,data=data.dis)
data$Y_n<-with(data,bin.size-Y)
data$Y_n.RE<-with(data,bin.size-Y.RE)
lev2bin.mod<-glmer(cbind(Y.RE,Y_n.RE) ~ x1 + (1|u),family=binomial,data=data)
data<-data.frame(x1=sample(0:1,sim.size,replace=T),u=rnorm(200,sd=2))
viewData(data)
data<-data.frame(x1=sample(0:1,sim.size,replace=T),clu=1:200,u=rnorm(200,sd=2))
viewData(data)
set.seed(20121111)
beta<-c(-0.5,1)
sim.size<-1000
bin.size<-10
data<-data.frame(x1=sample(0:1,sim.size,replace=T),clu=1:200,u=rnorm(200,sd=2))
data$pi<-with(data,1/(exp(-(beta[1]+beta[2]*x1))+1))
data$pi.RE<-with(data,1/(exp(-(beta[1]+beta[2]*x1+u))+1))
data$Y<-rbinom(sim.size,size=bin.size,prob=data$pi)
data$Y.RE<-rbinom(sim.size,size=bin.size,prob=data$pi.RE)
data$Y_n<-with(data,bin.size-Y)
data$Y_n.RE<-with(data,bin.size-Y.RE)
data.dis<-matrix(0,ncol=4,nrow=sim.size*bin.size)
for (i in 1:sim.size){
temp.data<-matrix(0,ncol=4,nrow=bin.size)
temp.data[,1]<-data[i,1]
temp.data[,2]<-data[i,2]
temp.data[,3]<-0
temp.data[1:data[i,]$Y,3]<-1
temp.data[,4]<-0
temp.data[1:data[i,]$Y.RE,4]<-1
data.dis[((i-1)*bin.size+1):(i*bin.size),]<-temp.data}
data.dis<-as.data.frame(data.dis)
names(data.dis)<-c("x1","u","Y","Y.RE")
lev2bin.mod<-glmer(cbind(Y.RE,Y_n.RE) ~ x1 + (1|u),family=binomial,data=data)
summary(lev2bin.mod)
data.dis<-matrix(0,ncol=5,nrow=sim.size*bin.size)
for (i in 1:sim.size){
temp.data<-matrix(0,ncol=5,nrow=bin.size)
temp.data[,1]<-data[i,1]
temp.data[,2]<-data[i,2]
temp.data[,3]<-data[i,3]
temp.data[,4]<-0
temp.data[1:data[i,]$Y,4]<-1
temp.data[,5]<-0
temp.data[1:data[i,]$Y.RE,5]<-1
data.dis[((i-1)*bin.size+1):(i*bin.size),]<-temp.data}
data.dis<-as.data.frame(data.dis)
names(data.dis)<-c("x1","clu","u","Y","Y.RE")
viewData(data.dis)
lev2bin.mod<-glmer(cbind(Y.RE,Y_n.RE) ~ x1 + (1|u),family=binomial,data=data)
lev2bindes.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data)
lev2bindes.mod<-glmer(Y.RE ~ x1 + (1|u),family=binomial,data=data.dis)
summary(lev2bindes.mod)
summary(lev2bin.mod)
summary(lev2bindes.mod)
14*900
code.info<-c("
#-------------------------------------------------------------------------------------
#
# STUDY:  SFI-studie
# CONTACT:  Robert Jonzon
# AFFILIATION:  AP-H
# PROJECT:  P10046
#
# STATISTICIAN: M?ns Magnusson
#
# Directory:   G:/AP-E/biostatistik/Projekt 2010/P10046 - Robert Jonzon (h?lsomottagning flyktingar)/
#
# Created:       2012-07-21 MM
# Printed/used:  ",as.character(Sys.Date()),"
#
# R version:   ",R.version$version.string,"
#
#-------------------------------------------------------------------------------------\n")
# Rensar workspace
rm(list = ls())
#-----------------------------------------------------------------------------------
# Paths
#-----------------------------------------------------------------------------------
project.path <- "/Users/mansmagnusson/Documents/Arbete/AT/Robert Jonzon/"
data.path <- paste(project.path,"Data",sep="")
data.work.path <- workdata.path <- paste(project.path,"Work data",sep="")
workdata.path.fritext <- paste(data.work.path,"/Fritextdata",sep="")
output.path <- paste(project.path,"output",sep="")
script.path <- paste(project.path,"Script",sep="")
codebook.path <- paste(project.path,"Kodbok",sep="")
lib.script.path<- "G:/AP-E/biostatistik/BIMs R-bibliotek"
#ANGER EN GEMENSAM MAPP F?R STATISTIKER OCH EPIDEMIOLOGER F?R ATT SPARA RESULTAT EL. H?MTA DATA
common.path <- ""
library(survey)
library(sampling)
library(xlsx)
dat.sfi.enhet.ram <-
read.xlsx(paste(data.path, "/SFIstudie/SFIenheter20121011.xlsx",sep=""),sheetIndex=1)
viewData(dat.sfi.enhet.ram)
dat.raw.sfi.ram<-read.csv2(file.path(data.path, "SFIstudie/data.SFI.csv"),stringsAsFactor=F)
viewData(dat.raw.sfi.ram)
mean(dat.raw.sfi.ram$Antal.elever)
viewData(dat.raw.sfi.ram)
mean(dat.raw.sfi.ram$Antal.elever/dat.raw.sfi.ram$Ant.anordnare)
table(dat.sfi.enhet.ram$Län)
mean(colSums(dat.raw.sfi.ram[,3:6])/dat.raw.sfi.ram$Ant.anordnare)
colSums(dat.raw.sfi.ram[,3:6])
rowSums(dat.raw.sfi.ram[,3:6])
mean(rowSums(dat.raw.sfi.ram[,3:6],na.rm=T)/dat.raw.sfi.ram$Ant.anordnare)
data<-data.frame(x,y,10:1)
x<-1:10
y<-10+x+rnorm(length(x))
data<-data.frame(x,y,10:1)
viewData(data)
table(data)
table(data$x,data$y)
data<-data.frame(x,y,z=10:1)
table(data$x,data$z)
pander(table(data$x,data$z))
library(pander)
pander(table(data$x,data$z))
pandoc.table(table(data$x,data$z))
pander(lm(y~x),style="simple")
pandoc.table(table(data$x,data$z),style="simple")
library(rjags)
install.packages(rjags)
install.packages("rjags")
library(rjags)
install.packages("rjags")
library(rjags)
install.packages("rjags")
library("rjags")
help("rjags")
setwd("/Users/mansmagnusson/Desktop/BayesLearn")
library("rjags")
setwd("/Users/mansmagnusson/Desktop/BayesLearn/liveBUGS")
library("rjags")
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
x<-c(1,1,0,0,1,1,1,1,0,1)
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
data
x<-c(1,1,0,0,1,1,1,1,0,1)
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
# Initial values
inits <- list(list(a = 1, b = 1),list(a = 1, b = 5))
x<-c(1,1,0,0,1,1,1,1,0,1)
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
# Initial values
inits <- list(list(a = 1, b = 1),list(a = 1, b = 5))
jags.model("bern.bugs",data,inits=inits,n.chains=1)
inits <- list(a = 1, b = 1)
jags.model("bern.bugs",data,inits=inits,n.chains=1)
inits <- list(list(a = 1, b = 1),list(a = 1, b = 5))
test<-jags.model("bern.bugs",data)
test<-jags.model("bern.bugs",data,inits=inits)
test<-jags.model("bern.bugs",data,inits=inits,n.chains=2)
inits <- list(a = 1, b = 5)
inits
test<-jags.model("bern.bugs",data,inits=inits)
jags.bern<-jags.model("bern.bugs",data)
s<-coda.samples(model=jags.bern,variable.names="p",n.iter=100)
s
s<-coda.samples(model=jags.bern,variable.names="p",n.iter=100000)
plot(s)
s<-coda.samples(model=jags.bern,variable.names="p",n.iter=10000)
plot(s)
s<-coda.samples(model=jags.bern,variable.names="p",n.iter=100000)
plot(s)
s<-coda.samples(model=jags.bern,variable.names="p",n.iter=1000000)
bern.sample<-coda.samples(model=jags.bern,variable.names="p",n.iter=1000)
ber.sample
summary(bern.sample)
plot(bern.sample)
weight<-c(71.2,58.2,56.0,64.5,53.0,52.4,56.8,49.2,55.6,77.8)
height<-c(169.6,166.8,157.1,181.1,158.4,165.6,166.7,156.5,168.1,165.3)
data <- list(height = height,
weight = weight,
n = length(height), )
jags.bern<-jags.model("linreg.bug",data)
jags.bern<-jags.model("linreg.bug",data)
jags.linreg<-jags.model("linreg.bug",data)
data <- list(height = height,
weight = weight,
n = length(height))
data
jags.linreg<-jags.model("linreg.bug",data)
linreg.sample<-coda.samples(model=jags.linreg,variable.names=c("beta0","beta1","sigma2"),n.iter=1000)
summary(bern.sample)
summary(linreg.sample)
plot(linreg.sample)
linreg.sample<-coda.samples(model=jags.linreg,variable.names=c("beta0","beta1","sigma2"),n.iter=10000)
summary(linreg.sample)
plot(linreg.sample)
summary(linreg.sample)
linreg.sample<-coda.samples(model=jags.linreg,variable.names=c("beta0","beta1","sigma2"),n.iter=10000,thin=100)
summary(linreg.sample)
plot(linreg.sample)
linreg.sample<-coda.samples(model=jags.linreg,variable.names=c("beta0","beta1","sigma2"),n.iter=100000,thin=100)
summary(linreg.sample)
plot(linreg.sample)
linreg.sample<-coda.samples(model=jags.linreg,variable.names=c("beta0","beta1","sigma2"),n.iter=400000,thin=200)
plot(linreg.sample)
help(coda.samples)
plot(linreg.sample)
str(jags.linreg)
jags.linreg$model
jags.linreg$state
rats.data<-
list(x = c(8.0, 15.0, 22.0, 29.0, 36.0), xbar = 22, N = 30, T = 5,
Y = structure(
.Data = c(151, 199, 246, 283, 320,
145, 199, 249, 293, 354,
147, 214, 263, 312, 328,
155, 200, 237, 272, 297,
135, 188, 230, 280, 323,
159, 210, 252, 298, 331,
141, 189, 231, 275, 305,
159, 201, 248, 297, 338,
177, 236, 285, 350, 376,
134, 182, 220, 260, 296,
160, 208, 261, 313, 352,
143, 188, 220, 273, 314,
154, 200, 244, 289, 325,
171, 221, 270, 326, 358,
163, 216, 242, 281, 312,
160, 207, 248, 288, 324,
142, 187, 234, 280, 316,
156, 203, 243, 283, 317,
157, 212, 259, 307, 336,
152, 203, 246, 286, 321,
154, 205, 253, 298, 334,
139, 190, 225, 267, 302,
146, 191, 229, 272, 302,
157, 211, 250, 285, 323,
132, 185, 237, 286, 331,
160, 207, 257, 303, 345,
169, 216, 261, 295, 333,
157, 205, 248, 289, 316,
137, 180, 219, 258, 291,
153, 200, 244, 286, 324),
.Dim = c(30,5)))
fix(rats.data)
r=c(10,23,23,26,15,5,53,55,32,46,10,8,10,8,23,0,3)
length(r)
rats.data<-
list(r=c(10,23,23,26,15,5,53,55,32,46,10,8,10,8,23,0,3),
n=c(39,62,82,51,39,6,74,72,51,79,13,16,30,28,45,4,12),
x1=c(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
x2=c(0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1))
jags.rats<-jags.model("rats.bug",data)
rats.data<-
list(r=c(10,23,23,26,15,5,53,55,32,46,10,8,10,8,23,0,3),
n=c(39,62,82,51,39,6,74,72,51,79,13,16,30,28,45,4,12),
x1=c(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
x2=c(0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1))
# Create JAGS model (Linear regression model)
jags.rats<-jags.model("rats.bug",data)
rats.data<-
list(r=c(10,23,23,26,15,5,53,55,32,46,10,8,10,8,23,0,3),
n=c(39,62,82,51,39,6,74,72,51,79,13,16,30,28,45,4,12),
x1=c(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
x2=c(0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1),
N=length(r))
jags.rats<-jags.model("rats.bug",data)
jags.rats<-jags.model("rats.bug",rats.data)
jags.rats<-jags.model("rats.bug",rats.data)
rags.sample<-coda.samples(model=jags.rats,variable.names=c("alpha0","alpha1","sigma"),n.iter=40000,thin=20)
summary(linreg.sample)
plot(linreg.sample)
rats.sample<-coda.samples(model=jags.rats,variable.names=c("alpha0","alpha1","sigma"),n.iter=40000,thin=20)
summary(rats.sample)
plot(rats.sample)
600+40+60
700*4
